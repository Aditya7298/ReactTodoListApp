{"version":3,"sources":["database.js","model.js","components/Todo.js","constants.js","components/EditForm.js","components/Navbar.js","components/AddForm.js","components/FilterForm.js","components/Analytics.js","components/Icons/delete.png","components/Icons/toggle.png","components/BulkButtons.js","hooks/useHistory.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["resolveDatabaseCall","faliureProbability","Math","random","Promise","resolve","reject","TodoStore","id","title","importance","completed","date","Date","toDateString","model","readAllTodos","readSingleTodo","todoId","find","todo","readFilteredTodos","filteredImportance","filteredDate","filter","changeTodoStoreState","prevTodoStore","a","createTodo","newTodo","uuid","editTodo","updatedTodo","map","toggleTodo","toggleBulkTodos","todoIds","includes","deleteTodo","deleteBulkTodos","Todo","todoInfo","isSelected","onToggle","onDelete","onEdit","onSelect","className","onClick","EditForm","todoTitle","todoImportance","onSubmit","hideEditForm","useState","formInput","setFormInput","handleChange","event","target","name","value","preventDefault","type","onChange","Navbar","dateString","slice","AddForm","onAdd","titleInput","importanceInput","newTodoInfo","setNewTodoInfo","prevNewTodoInfo","placeholder","htmlFor","FilterForm","onFilter","dateInput","prevFormInput","Analytics","todoList","completedCount","forEach","totalCount","length","circumference","radius","PI","offset","round","progressRingStyle","strokeDasharray","strokeDashoffset","strokeWidth","fill","r","cx","cy","stroke","style","x","y","fontSize","textAnchor","BulkButtons","onBulkDelete","onBulkToggle","alt","src","BulkDeleteIcon","BulkToggleIcon","useHistory","history","useRef","past","present","future","initHistory","useCallback","current","addNewEventToHistory","fetchUndoHistory","removeFromUndoHistory","prevTodoList","TodoList","setTodoList","showEditForm","boundTodoId","editFormInfo","setEditFormInfo","filterInfo","setFilterInfo","Set","selectedTodoIds","setSelectedTodoIds","fetchRedoHistory","removeFromRedoHistory","useEffect","handleUndoRedoKeyPress","evt","metaKey","key","prevTodoListState","then","modelResponse","window","addEventListener","removeEventListener","handleSelect","prevSelectedTodoIds","updatedSelectedTodoIds","has","delete","add","handleAdd","currTodoList","handleDelete","handleBulkDelete","Array","from","handleToggle","handleBulkToggle","handleEdit","updatedTitle","updatedImportance","prevTodo","handlefilter","getFilteredTodos","boundTodo","renderEditForm","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1122ea9.chunk.js","sourcesContent":["export const resolveDatabaseCall = () => {\n  const faliureProbability = Math.random();\n  return new Promise((resolve, reject) => {\n    if (faliureProbability >= -1) {\n      resolve();\n    } else {\n      reject();\n    }\n  });\n};\n","import { resolveDatabaseCall } from \"./database.js\";\nimport { v4 as uuid } from \"uuid\";\n\nlet TodoStore = [\n  {\n    id: \"1\",\n    title: \"Water the plants\",\n    importance: \"Do now!!!\",\n    completed: true,\n    date: new Date(\"02/10/2021\").toDateString(),\n  },\n  {\n    id: \"2\",\n    title: \"Learn Javascript\",\n    importance: \"Do tomorrow!!\",\n    completed: true,\n    date: new Date(\"02/11/2021\").toDateString(),\n  },\n  {\n    id: \"3\",\n    title: \"Sleep\",\n    importance: \"Do soon!\",\n    completed: false,\n    date: new Date(\"02/12/2021\").toDateString(),\n  },\n];\n\nconst readAllTodos = () => {\n  return TodoStore;\n};\n\nconst readSingleTodo = (todoId) => {\n  const selectedTodo = TodoStore.find((todo) => todo.id === todoId);\n  return selectedTodo;\n};\n\nconst readFilteredTodos = (filteredImportance, filteredDate) => {\n  const filteredTodos = TodoStore.filter((todo) => {\n    filteredDate =\n      filteredDate === \"\" ? \"\" : new Date(filteredDate).toDateString();\n\n    if (filteredDate !== \"\" && todo.date !== filteredDate) {\n      return false;\n    }\n\n    if (filteredImportance !== \"\" && todo.importance !== filteredImportance) {\n      return false;\n    }\n\n    return true;\n  });\n\n  return filteredTodos;\n};\n\nconst changeTodoStoreState = async (prevTodoStore) => {\n  try {\n    await resolveDatabaseCall();\n    TodoStore = prevTodoStore;\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\nconst createTodo = async (title, importance) => {\n  try {\n    const newTodo = {\n      id: uuid(),\n      title,\n      importance,\n      completed: false,\n      date: new Date().toDateString(),\n    };\n\n    await resolveDatabaseCall();\n    TodoStore = [...TodoStore, newTodo];\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\nconst editTodo = async (todoId, updatedTodo) => {\n  try {\n    await resolveDatabaseCall();\n    TodoStore = TodoStore.map((todo) =>\n      todo.id === todoId ? { ...todo, ...updatedTodo } : todo\n    );\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\nconst toggleTodo = async (todoId) => {\n  try {\n    await resolveDatabaseCall();\n    TodoStore = TodoStore.map((todo) =>\n      todo.id === todoId ? { ...todo, completed: !todo.completed } : todo\n    );\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\nconst toggleBulkTodos = async (todoIds) => {\n  try {\n    await resolveDatabaseCall();\n    TodoStore = TodoStore.map((todo) =>\n      todoIds.includes(todo.id) ? { ...todo, completed: !todo.completed } : todo\n    );\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\nconst deleteTodo = async (todoId) => {\n  try {\n    await resolveDatabaseCall();\n    TodoStore = TodoStore.filter((todo) => todo.id !== todoId);\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\nconst deleteBulkTodos = async (todoIds) => {\n  try {\n    await resolveDatabaseCall();\n    TodoStore = TodoStore.filter((todo) => !todoIds.includes(todo.id));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\nconst model = {\n  readAllTodos,\n  readSingleTodo,\n  readFilteredTodos,\n  changeTodoStoreState,\n  createTodo,\n  editTodo,\n  toggleTodo,\n  toggleBulkTodos,\n  deleteTodo,\n  deleteBulkTodos,\n};\n\nexport default model;\n","import \"./Todo.css\";\n\nconst Todo = ({\n  todoInfo,\n  isSelected,\n  onToggle,\n  onDelete,\n  onEdit,\n  onSelect,\n}) => {\n  const { id, title, importance, date } = todoInfo;\n\n  return (\n    <div className=\"todo\">\n      <span\n        onClick={() => {\n          onSelect(id);\n        }}\n        className={\n          isSelected\n            ? \"todo-selectbutton todo-selectbutton-selected\"\n            : \"todo-selectbutton\"\n        }\n      ></span>\n      <span className=\"todo-title\">{title}</span>\n      <span className=\"todo-date\">{date}</span>\n      <div className=\"todo-buttons\">\n        <button\n          onClick={() => {\n            onToggle(id);\n          }}\n        >\n          Toggle\n        </button>\n        <button\n          onClick={() => {\n            onDelete(id);\n          }}\n        >\n          Delete\n        </button>\n        <button\n          onClick={() => {\n            onEdit(id);\n          }}\n        >\n          Edit\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Todo;\n","export const user_action = {\n  EDIT: \"EDIT\",\n  TOGGLE: \"TOGGLE\",\n  CREATE: \"CREATE\",\n  DELETE: \"DELETE\",\n  SELECT: \"SELECT\",\n  BULKDELETE: \"BULK-DELETE\",\n  BULKTOGGLE: \"BULK-TOGGLE\",\n  BULKADD: \"BULK-ADD\",\n  CHANGESTATE: \"CHANGE-STATE\",\n  UNDO: \"UNDO\",\n  REDO: \"REDO\",\n};\n\nexport const importance = {\n  HIGH: \"Do now!!!\",\n  MEDIUM: \"Do tomorrow!!\",\n  LOW: \"Do soon!\",\n  NONE: \"Do when you have extra time\",\n};\n","import { useState } from \"react\";\nimport { importance } from \"../constants\";\nimport \"./EditForm.css\";\n\nconst EditForm = ({\n  todoId,\n  todoTitle,\n  todoImportance,\n  onSubmit,\n  hideEditForm,\n}) => {\n  const [formInput, setFormInput] = useState({\n    title: todoTitle,\n    importance: todoImportance,\n  });\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormInput({ ...formInput, [name]: value });\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    hideEditForm();\n    onSubmit(todoId, formInput.title, formInput.importance);\n  };\n\n  return (\n    <div className=\"modal-bg\">\n      <div className=\"modal\">\n        <h4>Edit Todo</h4>\n        <form className=\"modal-editform\" onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            name=\"title\"\n            value={formInput.title}\n            onChange={handleChange}\n          ></input>\n          <select\n            name=\"importance\"\n            onChange={handleChange}\n            value={formInput.importance}\n          >\n            <option value={importance.HIGH}>{importance.HIGH}</option>\n            <option value={importance.MEDIUM}>{importance.MEDIUM}</option>\n            <option value={importance.LOW}>{importance.LOW}</option>\n            <option value={importance.NONE}>{importance.NONE}</option>\n          </select>\n          <button type=\"submit\">Submit</button>\n          <button onClick={() => hideEditForm()}>Cancel</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default EditForm;\n","import \"./Navbar.css\";\n\nconst Navbar = () => {\n  const currDate = new Date();\n  const dateString = currDate.toDateString().slice(4);\n  return (\n    <div className=\"navbar\">\n      <span className=\"navbar-title\">Todo-List App</span>\n      <span className=\"navbar-date\">{dateString}</span>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import { useState } from \"react\";\nimport { importance } from \"../constants\";\nimport \"./AddForm.css\";\n\nconst AddForm = ({ onAdd }) => {\n  const [newTodoInfo, setNewTodoInfo] = useState({\n    titleInput: \"\",\n    importanceInput: \"\",\n  });\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setNewTodoInfo((prevNewTodoInfo) => ({\n      ...prevNewTodoInfo,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    onAdd({\n      title: newTodoInfo.titleInput,\n      importance: newTodoInfo.importanceInput,\n    });\n    setNewTodoInfo({ titleInput: \"\", importanceInput: \"\" });\n  };\n\n  return (\n    <div className=\"addform\">\n      <h3>Add a new Todo</h3>\n      <form onSubmit={handleSubmit} className=\"addform-form\">\n        <input\n          className=\"addform-form-title\"\n          type=\"text\"\n          name=\"titleInput\"\n          value={newTodoInfo.titleInput}\n          onChange={handleChange}\n          placeholder=\"Add new todo title\"\n        ></input>\n        <label htmlFor=\"addform-form-importance\">Select Todo importance</label>\n        <select\n          id=\"addform-form-importance\"\n          className=\"addform-form-importance\"\n          name=\"importanceInput\"\n          onChange={handleChange}\n          value={newTodoInfo.importance}\n        >\n          <option value={importance.HIGH}>{importance.HIGH}</option>\n          <option value={importance.MEDIUM}>{importance.MEDIUM}</option>\n          <option value={importance.LOW}>{importance.LOW}</option>\n          <option value={importance.NONE}>{importance.NONE}</option>\n        </select>\n        <button className=\"addform-form-button\" type=\"submit\">\n          Add\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default AddForm;\n","import { useState } from \"react\";\nimport { importance } from \"../constants\";\nimport \"./FilterForm.css\";\n\nconst FilterForm = ({ onFilter }) => {\n  const [formInput, setFormInput] = useState({\n    importanceInput: \"\",\n    dateInput: \"\",\n  });\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormInput((prevFormInput) => ({ ...prevFormInput, [name]: value }));\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    onFilter(formInput.importanceInput, formInput.dateInput);\n  };\n\n  const resetFilter = (event) => {\n    event.preventDefault();\n    setFormInput({ importanceInput: \"\", dateInput: \"\" });\n    onFilter(\"\", \"\");\n  };\n\n  return (\n    <div className=\"filterform\">\n      <h3>Filter Todos</h3>\n      <form onSubmit={handleSubmit} className=\"filterform-form\">\n        <label htmlFor=\"filterform-form-title\">Filter by date</label>\n        <input\n          id=\"filterform-form__title\"\n          className=\"filterform-form-title\"\n          name=\"dateInput\"\n          type=\"date\"\n          value={formInput.dateInput}\n          onChange={handleChange}\n        />\n        <label htmlFor=\"filterform-form-importance\">Filter by importance</label>\n        <select\n          id=\"filterform-form-importance\"\n          className=\"filterform-form-importance\"\n          name=\"importanceInput\"\n          value={formInput.importanceInput}\n          onChange={handleChange}\n        >\n          <option value=\"\">All</option>\n          <option value={importance.HIGH}>{importance.HIGH}</option>\n          <option value={importance.MEDIUM}>{importance.MEDIUM}</option>\n          <option value={importance.LOW}>{importance.LOW}</option>\n          <option value={importance.NONE}>{importance.NONE}</option>\n        </select>\n        <button className=\"filterform-form-button\" type=\"submit\">\n          Filter Todos\n        </button>\n        <button\n          className=\"filterform-form-button\"\n          type=\"reset\"\n          onClick={resetFilter}\n        >\n          Reset\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default FilterForm;\n","import \"./Analytics.css\";\n\nconst Analytics = ({ todoList }) => {\n  let completedCount = 0;\n  todoList.forEach((todo) => {\n    if (todo.completed) {\n      completedCount += 1;\n    }\n  });\n\n  const totalCount = todoList.length;\n\n  const radius = 98;\n  const circumference = radius * 2 * Math.PI;\n  const percent =\n    totalCount === 0 ? 0 : Math.round((completedCount / totalCount) * 100);\n  const offset = circumference - (percent / 100) * circumference;\n\n  const progressRingStyle = {\n    strokeDasharray: `${circumference} ${circumference}`,\n    strokeDashoffset: offset,\n  };\n\n  return (\n    <div className=\"analytics\">\n      <h3>Completed Todos</h3>\n      <svg className=\"analytics-progress-ring\">\n        <circle\n          className=\"analytics-progress-ring__circle\"\n          strokeWidth=\"4\"\n          fill=\"#769fcd\"\n          r=\"98\"\n          cx=\"50%\"\n          cy=\"25%\"\n          stroke=\"black\"\n          style={progressRingStyle}\n        ></circle>\n        <text\n          className=\"analytics-progress-ring__text\"\n          x=\"50%\"\n          y=\"27%\"\n          fill=\"black\"\n          fontSize=\"x-large\"\n          textAnchor=\"middle\"\n        >\n          {completedCount} out of {totalCount}\n        </text>\n      </svg>\n    </div>\n  );\n};\n\nexport default Analytics;\n","export default __webpack_public_path__ + \"static/media/delete.4cf85250.png\";","export default __webpack_public_path__ + \"static/media/toggle.e819d821.png\";","import \"./BulkButtons.css\";\nimport BulkDeleteIcon from \"./Icons/delete.png\";\nimport BulkToggleIcon from \"./Icons/toggle.png\";\n\nconst BulkButtons = ({ onBulkDelete, onBulkToggle }) => {\n  return (\n    <div className=\"bulkbuttons\">\n      <span\n        onClick={() => {\n          onBulkDelete();\n        }}\n        className=\"bulkbuttons-delete\"\n      >\n        <img\n          alt=\"Delete Selected Todos\"\n          className=\"bulkbuttons-delete-icon\"\n          src={BulkDeleteIcon}\n        ></img>\n      </span>\n      <span\n        onClick={() => {\n          onBulkToggle();\n        }}\n        className=\"bulkbuttons-toggle\"\n      >\n        <img\n          alt=\"Toggle Selected Todos\"\n          className=\"bulkbuttons-toggle-icon\"\n          src={BulkToggleIcon}\n        ></img>\n      </span>\n    </div>\n  );\n};\n\nexport default BulkButtons;\n","import { useRef, useCallback } from \"react\";\n\nconst useHistory = () => {\n  const history = useRef({ past: [], present: null, future: [] });\n\n  const initHistory = useCallback((todoList) => {\n    history.current.present = todoList;\n  }, []);\n\n  const addNewEventToHistory = useCallback((todoList) => {\n    history.current = {\n      past: [...history.current.past, history.current.present],\n      present: todoList,\n      future: [],\n    };\n  }, []);\n\n  const fetchUndoHistory = useCallback(() => {\n    if (!history.current.past.length) {\n      return null;\n    }\n\n    const prevTodoList = history.current.past[history.current.past.length - 1];\n\n    return prevTodoList;\n  }, []);\n\n  const removeFromUndoHistory = useCallback(() => {\n    // debugger;\n\n    const prevTodoList = history.current.past[history.current.past.length - 1];\n\n    history.current = {\n      future: [...history.current.future, history.current.present],\n      present: prevTodoList,\n      past: history.current.past.slice(0, history.current.past.length - 1),\n    };\n  }, []);\n\n  const fetchRedoHistory = useCallback(() => {\n    if (!history.current.future.length) {\n      return null;\n    }\n\n    const prevTodoList =\n      history.current.future[history.current.future.length - 1];\n\n    return prevTodoList;\n  }, []);\n\n  const removeFromRedoHistory = useCallback(() => {\n    const prevTodoList =\n      history.current.future[history.current.future.length - 1];\n\n    history.current = {\n      past: [...history.current.past, history.current.present],\n      present: prevTodoList,\n      future: history.current.future.slice(\n        0,\n        history.current.future.length - 1\n      ),\n    };\n  }, []);\n\n  return [\n    initHistory,\n    addNewEventToHistory,\n    fetchUndoHistory,\n    fetchRedoHistory,\n    removeFromUndoHistory,\n    removeFromRedoHistory,\n  ];\n};\n\nexport default useHistory;\n","import { useState, useEffect, useCallback } from \"react\";\nimport model from \"../model\";\nimport Todo from \"./Todo\";\nimport EditForm from \"./EditForm\";\nimport Navbar from \"./Navbar\";\nimport AddForm from \"./AddForm\";\nimport FilterForm from \"./FilterForm\";\nimport Analytics from \"./Analytics\";\nimport BulkButtons from \"./BulkButtons\";\nimport useHistory from \"../hooks/useHistory\";\nimport \"./TodoList.css\";\n\nconst TodoList = () => {\n  const [todoList, setTodoList] = useState([]);\n  const [editFormInfo, setEditFormInfo] = useState({\n    showEditForm: false,\n    boundTodoId: null,\n  });\n  const [filterInfo, setFilterInfo] = useState({\n    importance: \"\",\n    date: \"\",\n  });\n  const [selectedTodoIds, setSelectedTodoIds] = useState(new Set());\n  const [\n    initHistory,\n    addNewEventToHistory,\n    fetchUndoHistory,\n    fetchRedoHistory,\n    removeFromUndoHistory,\n    removeFromRedoHistory,\n  ] = useHistory();\n\n  useEffect(() => {\n    setTodoList(model.readAllTodos());\n    initHistory(model.readAllTodos());\n  }, [initHistory]);\n\n  useEffect(() => {\n    const handleUndoRedoKeyPress = (evt) => {\n      if (evt.metaKey && evt.key === \"z\") {\n        const prevTodoListState = fetchUndoHistory();\n        if (prevTodoListState) {\n          model\n            .changeTodoStoreState(prevTodoListState)\n            .then((modelResponse) => {\n              if (modelResponse) {\n                setTodoList(prevTodoListState);\n                removeFromUndoHistory();\n              } else {\n                //Handle Error\n              }\n            });\n        }\n      }\n\n      if (evt.metaKey && evt.key === \"x\") {\n        const prevTodoListState = fetchRedoHistory();\n        if (prevTodoListState) {\n          model\n            .changeTodoStoreState(prevTodoListState)\n            .then((modelResponse) => {\n              if (modelResponse) {\n                setTodoList(prevTodoListState);\n                removeFromRedoHistory();\n              } else {\n                //Handle Error\n              }\n            });\n        }\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleUndoRedoKeyPress);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleUndoRedoKeyPress);\n    };\n  }, [\n    fetchUndoHistory,\n    fetchRedoHistory,\n    removeFromUndoHistory,\n    removeFromRedoHistory,\n  ]);\n\n  const handleSelect = useCallback((todoId) => {\n    setSelectedTodoIds((prevSelectedTodoIds) => {\n      const updatedSelectedTodoIds = new Set(prevSelectedTodoIds);\n\n      if (prevSelectedTodoIds.has(todoId)) {\n        updatedSelectedTodoIds.delete(todoId);\n      } else {\n        updatedSelectedTodoIds.add(todoId);\n      }\n\n      return updatedSelectedTodoIds;\n    });\n  }, []);\n\n  const handleAdd = useCallback(\n    (newTodoInfo) => {\n      const { title, importance } = newTodoInfo;\n      model.createTodo(title, importance).then((modelResponse) => {\n        if (modelResponse) {\n          const currTodoList = model.readAllTodos();\n          setTodoList(currTodoList);\n          addNewEventToHistory(currTodoList);\n        } else {\n          //Handle Error\n        }\n      });\n    },\n    [addNewEventToHistory]\n  );\n\n  const handleDelete = useCallback(\n    (todoId) => {\n      model.deleteTodo(todoId).then((modelResponse) => {\n        if (modelResponse) {\n          const currTodoList = model.readAllTodos();\n          setTodoList(currTodoList);\n          addNewEventToHistory(currTodoList);\n        } else {\n          //Handle Error\n        }\n      });\n    },\n    [addNewEventToHistory]\n  );\n\n  const handleBulkDelete = useCallback(() => {\n    const todoIds = Array.from(selectedTodoIds);\n    model.deleteBulkTodos(todoIds).then((modelResponse) => {\n      if (modelResponse) {\n        const currTodoList = model.readAllTodos();\n        addNewEventToHistory(currTodoList);\n        setTodoList(currTodoList);\n        setSelectedTodoIds(new Set());\n      } else {\n        //Handle Error\n      }\n    });\n  }, [selectedTodoIds, addNewEventToHistory]);\n\n  const handleToggle = useCallback(\n    (todoId) => {\n      model.toggleTodo(todoId).then((modelResponse) => {\n        if (modelResponse) {\n          const currTodoList = model.readAllTodos();\n          setTodoList(currTodoList);\n          addNewEventToHistory(currTodoList);\n        } else {\n          //Handle Error\n        }\n      });\n    },\n    [addNewEventToHistory]\n  );\n\n  const handleBulkToggle = useCallback(() => {\n    const todoIds = Array.from(selectedTodoIds);\n    model.toggleBulkTodos(todoIds).then((modelResponse) => {\n      if (modelResponse) {\n        const currTodoList = model.readAllTodos();\n        setTodoList(currTodoList);\n        addNewEventToHistory(currTodoList);\n        setSelectedTodoIds(new Set());\n      } else {\n        //Handle Error\n      }\n    });\n  }, [selectedTodoIds, addNewEventToHistory]);\n\n  const showEditForm = useCallback((todoId) => {\n    setEditFormInfo({ showEditForm: true, boundTodoId: todoId });\n  }, []);\n\n  const handleEdit = useCallback(\n    (todoId, updatedTitle, updatedImportance) => {\n      const prevTodo = model.readSingleTodo(todoId);\n      const updatedTodo = {\n        ...prevTodo,\n        title: updatedTitle,\n        importance: updatedImportance,\n      };\n      model.editTodo(updatedTodo.id, updatedTodo).then((modelResponse) => {\n        if (modelResponse) {\n          const currTodoList = model.readAllTodos();\n          setTodoList(currTodoList);\n          addNewEventToHistory(currTodoList);\n        } else {\n          //Handle Error\n        }\n      });\n    },\n    [addNewEventToHistory]\n  );\n\n  const handlefilter = useCallback((filteredImportance, filteredDate) => {\n    setFilterInfo({ importance: filteredImportance, date: filteredDate });\n  }, []);\n\n  const hideEditForm = useCallback(() => {\n    setEditFormInfo({ showEditForm: false, boundTodoId: null });\n  }, []);\n\n  const renderEditForm = () => {\n    const boundTodo = model.readSingleTodo(editFormInfo.boundTodoId);\n    return (\n      <EditForm\n        todoId={boundTodo.id}\n        todoTitle={boundTodo.title}\n        todoImportance={boundTodo.importance}\n        hideEditForm={hideEditForm}\n        onSubmit={handleEdit}\n      />\n    );\n  };\n\n  const getFilteredTodos = () => {\n    const filteredTodos = todoList.filter((todo) => {\n      const filteredDate =\n          filterInfo.date === \"\"\n            ? \"\"\n            : new Date(filterInfo.date).toDateString(),\n        filteredImportance = filterInfo.importance;\n\n      if (filteredDate !== \"\" && todo.date !== filteredDate) {\n        return false;\n      }\n\n      if (filteredImportance !== \"\" && todo.importance !== filteredImportance) {\n        return false;\n      }\n\n      return true;\n    });\n\n    return filteredTodos;\n  };\n\n  return (\n    <div className=\"todolist\">\n      <div className=\"todolist-header\">\n        <Navbar />\n      </div>\n      <div className=\"todolist-body\">\n        <div className=\"todolist-body-sidebar\">\n          <AddForm onAdd={handleAdd} />\n          <FilterForm onFilter={handlefilter} />\n          <Analytics todoList={getFilteredTodos()} />\n        </div>\n        <div className=\"todolist-body-container\">\n          {getFilteredTodos().map((todo) => (\n            <Todo\n              key={todo.id}\n              todoInfo={todo}\n              isSelected={selectedTodoIds.has(todo.id)}\n              onToggle={handleToggle}\n              onDelete={handleDelete}\n              onEdit={showEditForm}\n              onSelect={handleSelect}\n            />\n          ))}\n        </div>\n        <div className=\"todolist-body-bulkbuttons\">\n          <BulkButtons\n            onBulkDelete={handleBulkDelete}\n            onBulkToggle={handleBulkToggle}\n          />\n        </div>\n\n        {editFormInfo.showEditForm && renderEditForm()}\n      </div>\n    </div>\n  );\n};\n\nexport default TodoList;\n","import \"./App.css\";\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}